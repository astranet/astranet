// btree.go Copyright 2014 The b Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file has been generated by http://github.com/cznic/b

package btree2d

import (
	"fmt"
	"io"
	"sync"
	"sync/atomic"

	"github.com/joeshaw/gengen/generic"
)

const (
	kx1 = 64 //TODO benchmark tune this number if using custom key/value type(s).
	kd1 = 64 //TODO benchmark tune this number if using custom key/value type(s).
)

func init() {
	if kd1 < 1 {
		panic(fmt.Errorf("kd1 %d: out of range", kd1))
	}

	if kx1 < 2 {
		panic(fmt.Errorf("kx1 %d: out of range", kx1))
	}
}

var (
	btDPool1 = sync.Pool{New: func() interface{} { return &d1{} }}
	btEPool1 = btEpool1{sync.Pool{New: func() interface{} { return &PrimaryEnumerator{} }}}
	btTPool1 = btTpool1{sync.Pool{New: func() interface{} { return &PrimaryTree{} }}}
	btXPool1 = sync.Pool{New: func() interface{} { return &x1{} }}
)

type btTpool1 struct{ sync.Pool }

func (p *btTpool1) get(cmp PrimaryCmpFunc) *PrimaryTree {
	x := p.Get().(*PrimaryTree)
	x.cmp = cmp
	return x
}

type btEpool1 struct{ sync.Pool }

func (p *btEpool1) get(err error, hit bool, i int, k generic.T, q *d1, t *PrimaryTree, ver uint64) *PrimaryEnumerator {
	x := p.Get().(*PrimaryEnumerator)
	x.err, x.hit, x.i, x.k, x.q, x.t, x.ver = err, hit, i, k, q, t, ver
	return x
}

type (
	d1 struct { // data page
		c int
		d [2*kd1 + 1]de1
		n *d1
		p *d1
	}

	de1 struct { // d element
		k generic.T
		v SecondaryLayer
	}

	// PrimaryEnumerator captures the state of enumerating a tree. It is returned
	// from the Seek* methods. The enumerator is aware of any mutations
	// made to the tree in the process of enumerating it and automatically
	// resumes the enumeration at the proper key, if possible.
	//
	// However, once an PrimaryEnumerator returns io.EOF to signal "no more
	// items", it does no more attempt to "resync" on tree mutation(s).  In
	// other words, io.EOF from an PrimaryEnumerator is "sticky" (idempotent).
	PrimaryEnumerator struct {
		err error
		hit bool
		i   int
		k   generic.T
		q   *d1
		t   *PrimaryTree
		ver uint64
	}

	// PrimaryTree is a B+tree.
	PrimaryTree struct {
		c     int
		cmp   PrimaryCmpFunc
		first *d1
		last  *d1
		r     interface{}
		ver   uint64
	}

	xe1 struct { // x element
		ch interface{}
		k  generic.T
	}

	x1 struct { // index page
		c int
		x [2*kx1 + 2]xe1
	}
)

var ( // R/O zero values
	zd1  d1
	zde1 de1
	ze1  PrimaryEnumerator
	zk1  generic.T
	zt1  PrimaryTree
	zx1  x1
	zxe1 xe1
)

func clr1(q interface{}) {
	switch x := q.(type) {
	case *x1:
		for i := 0; i <= x.c; i++ { // Ch0 Sep0 ... Chn-1 Sepn-1 Chn
			clr1(x.x[i].ch)
		}
		*x = zx1
		btXPool1.Put(x)
	case *d1:
		*x = zd1
		btDPool1.Put(x)
	}
}

// -------------------------------------------------------------------------- x

func newX1(ch0 interface{}) *x1 {
	r := btXPool1.Get().(*x1)
	r.x[0].ch = ch0
	return r
}

func (q *x1) extract(i int) {
	q.c--
	if i < q.c {
		copy(q.x[i:], q.x[i+1:q.c+1])
		q.x[q.c].ch = q.x[q.c+1].ch
		q.x[q.c].k = zk1  // GC
		q.x[q.c+1] = zxe1 // GC
	}
}

func (q *x1) insert(i int, k generic.T, ch interface{}) *x1 {
	c := q.c
	if i < c {
		q.x[c+1].ch = q.x[c].ch
		copy(q.x[i+2:], q.x[i+1:c])
		q.x[i+1].k = q.x[i].k
	}
	c++
	q.c = c
	q.x[i].k = k
	q.x[i+1].ch = ch
	return q
}

func (q *x1) siblings(i int) (l, r *d1) {
	if i >= 0 {
		if i > 0 {
			l = q.x[i-1].ch.(*d1)
		}
		if i < q.c {
			r = q.x[i+1].ch.(*d1)
		}
	}
	return
}

// -------------------------------------------------------------------------- d

func (l *d1) mvL(r *d1, c int) {
	copy(l.d[l.c:], r.d[:c])
	copy(r.d[:], r.d[c:r.c])
	l.c += c
	r.c -= c
}

func (l *d1) mvR(r *d1, c int) {
	copy(r.d[c:], r.d[:r.c])
	copy(r.d[:c], l.d[l.c-c:])
	r.c += c
	l.c -= c
}

// ----------------------------------------------------------------------- PrimaryTree

// NewPrimaryTree returns a newly created, empty PrimaryTree. The compare function is used
// for key collation.
func NewPrimaryTree(cmp PrimaryCmpFunc) *PrimaryTree {
	return btTPool1.get(cmp)
}

// Clear removes all K/V pairs from the tree.
func (t *PrimaryTree) Clear() {
	if t.r == nil {
		return
	}

	clr1(t.r)
	t.c, t.first, t.last, t.r = 0, nil, nil, nil
	atomic.AddUint64(&t.ver, 1)
}

// Close performs Clear and recycles t to a pool for possible later reuse. No
// references to t should exist or such references must not be used afterwards.
func (t *PrimaryTree) Close() {
	t.Clear()
	*t = zt1
	btTPool1.Put(t)
}

func (t *PrimaryTree) cat(p *x1, q, r *d1, pi int) {
	atomic.AddUint64(&t.ver, 1)
	q.mvL(r, r.c)
	if r.n != nil {
		r.n.p = q
	} else {
		t.last = q
	}
	q.n = r.n
	*r = zd1
	btDPool1.Put(r)
	if p.c > 1 {
		p.extract(pi)
		p.x[pi].ch = q
		return
	}

	switch x := t.r.(type) {
	case *x1:
		*x = zx1
		btXPool1.Put(x)
	case *d1:
		*x = zd1
		btDPool1.Put(x)
	}
	t.r = q
}

func (t *PrimaryTree) catX(p, q, r *x1, pi int) {
	atomic.AddUint64(&t.ver, 1)
	q.x[q.c].k = p.x[pi].k
	copy(q.x[q.c+1:], r.x[:r.c])
	q.c += r.c + 1
	q.x[q.c].ch = r.x[r.c].ch
	*r = zx1
	btXPool1.Put(r)
	if p.c > 1 {
		p.c--
		pc := p.c
		if pi < pc {
			p.x[pi].k = p.x[pi+1].k
			copy(p.x[pi+1:], p.x[pi+2:pc+1])
			p.x[pc].ch = p.x[pc+1].ch
			p.x[pc].k = zk1    // GC
			p.x[pc+1].ch = nil // GC
		}
		return
	}

	switch x := t.r.(type) {
	case *x1:
		*x = zx1
		btXPool1.Put(x)
	case *d1:
		*x = zd1
		btDPool1.Put(x)
	}
	t.r = q
}

// Delete removes the k's KV pair, if it exists, in which case Delete returns
// true.
func (t *PrimaryTree) Delete(k generic.T) (ok bool) {
	pi := -1
	var p *x1
	q := t.r
	if q == nil {
		return false
	}

	for {
		var i int
		i, ok = t.find(q, k)
		if ok {
			switch x := q.(type) {
			case *x1:
				if x.c < kx1 && q != t.r {
					x, i = t.underflowX(p, x, pi, i)
				}
				pi = i + 1
				p = x
				q = x.x[pi].ch
				ok = false
				continue
			case *d1:
				t.extract(x, i)
				if x.c >= kd1 {
					return true
				}

				if q != t.r {
					t.underflow(p, x, pi)
				} else if t.c == 0 {
					t.Clear()
				}
				return true
			}
		}

		switch x := q.(type) {
		case *x1:
			if x.c < kx1 && q != t.r {
				x, i = t.underflowX(p, x, pi, i)
			}
			pi = i
			p = x
			q = x.x[i].ch
		case *d1:
			return false
		}
	}
}

func (t *PrimaryTree) extract(q *d1, i int) { // (r SecondaryLayer) {
	atomic.AddUint64(&t.ver, 1)
	//r = q.d[i].v // prepared for Extract
	q.c--
	if i < q.c {
		copy(q.d[i:], q.d[i+1:q.c+1])
	}
	q.d[q.c] = zde1 // GC
	t.c--
	return
}

func (t *PrimaryTree) find(q interface{}, k generic.T) (i int, ok bool) {
	var mk generic.T
	l := 0
	switch x := q.(type) {
	case *x1:
		h := x.c - 1
		for l <= h {
			m := (l + h) >> 1
			mk = x.x[m].k
			switch cmp := t.cmp(k, mk); {
			case cmp > 0:
				l = m + 1
			case cmp == 0:
				return m, true
			default:
				h = m - 1
			}
		}
	case *d1:
		h := x.c - 1
		for l <= h {
			m := (l + h) >> 1
			mk = x.d[m].k
			switch cmp := t.cmp(k, mk); {
			case cmp > 0:
				l = m + 1
			case cmp == 0:
				return m, true
			default:
				h = m - 1
			}
		}
	}
	return l, false
}

// First returns the first item of the tree in the key collating order, or
// (zero-value, zero-value) if the tree is empty.
func (t *PrimaryTree) First() (k generic.T, v SecondaryLayer) {
	if q := t.first; q != nil {
		q := &q.d[0]
		k, v = q.k, q.v
	}
	return
}

// Get returns the value associated with k and true if it exists. Otherwise Get
// returns (zero-value, false).
func (t *PrimaryTree) Get(k generic.T) (v SecondaryLayer, ok bool) {
	q := t.r
	if q == nil {
		return
	}

	for {
		var i int
		if i, ok = t.find(q, k); ok {
			switch x := q.(type) {
			case *x1:
				q = x.x[i+1].ch
				continue
			case *d1:
				return x.d[i].v, true
			}
		}
		switch x := q.(type) {
		case *x1:
			q = x.x[i].ch
		default:
			return
		}
	}
}

func (t *PrimaryTree) insert(q *d1, i int, k generic.T, v SecondaryLayer) *d1 {
	atomic.AddUint64(&t.ver, 1)
	c := q.c
	if i < c {
		copy(q.d[i+1:], q.d[i:c])
	}
	c++
	q.c = c
	q.d[i].k, q.d[i].v = k, v
	t.c++
	return q
}

// Last returns the last item of the tree in the key collating order, or
// (zero-value, zero-value) if the tree is empty.
func (t *PrimaryTree) Last() (k generic.T, v SecondaryLayer) {
	if q := t.last; q != nil {
		q := &q.d[q.c-1]
		k, v = q.k, q.v
	}
	return
}

// Len returns the number of items in the tree.
func (t *PrimaryTree) Len() int {
	return t.c
}

func (t *PrimaryTree) overflow(p *x1, q *d1, pi, i int, k generic.T, v SecondaryLayer) {
	atomic.AddUint64(&t.ver, 1)
	l, r := p.siblings(pi)

	if l != nil && l.c < 2*kd1 && i != 0 {
		l.mvL(q, 1)
		t.insert(q, i-1, k, v)
		p.x[pi-1].k = q.d[0].k
		return
	}

	if r != nil && r.c < 2*kd1 {
		if i < 2*kd1 {
			q.mvR(r, 1)
			t.insert(q, i, k, v)
			p.x[pi].k = r.d[0].k
			return
		}

		t.insert(r, 0, k, v)
		p.x[pi].k = k
		return
	}

	t.split(p, q, pi, i, k, v)
}

// Seek returns an PrimaryEnumerator positioned on an item such that k >= item's key.
// ok reports if k == item.key The PrimaryEnumerator's position is possibly after the
// last item in the tree.
func (t *PrimaryTree) Seek(k generic.T) (e *PrimaryEnumerator, ok bool) {
	q := t.r
	if q == nil {
		e = btEPool1.get(nil, false, 0, k, nil, t, atomic.LoadUint64(&t.ver))
		return
	}

	for {
		var i int
		if i, ok = t.find(q, k); ok {
			switch x := q.(type) {
			case *x1:
				q = x.x[i+1].ch
				continue
			case *d1:
				return btEPool1.get(nil, ok, i, k, x, t, atomic.LoadUint64(&t.ver)), true
			}
		}

		switch x := q.(type) {
		case *x1:
			q = x.x[i].ch
		case *d1:
			return btEPool1.get(nil, ok, i, k, x, t, atomic.LoadUint64(&t.ver)), false
		}
	}
}

// SeekFirst returns an enumerator positioned on the first KV pair in the tree,
// if any. For an empty tree, err == io.EOF is returned and e will be nil.
func (t *PrimaryTree) SeekFirst() (e *PrimaryEnumerator, err error) {
	q := t.first
	if q == nil {
		return nil, io.EOF
	}

	return btEPool1.get(nil, true, 0, q.d[0].k, q, t, atomic.LoadUint64(&t.ver)), nil
}

// SeekLast returns an enumerator positioned on the last KV pair in the tree,
// if any. For an empty tree, err == io.EOF is returned and e will be nil.
func (t *PrimaryTree) SeekLast() (e *PrimaryEnumerator, err error) {
	q := t.last
	if q == nil {
		return nil, io.EOF
	}

	return btEPool1.get(nil, true, q.c-1, q.d[q.c-1].k, q, t, atomic.LoadUint64(&t.ver)), nil
}

// Set sets the value associated with k.
func (t *PrimaryTree) Set(k generic.T, v SecondaryLayer) {
	//dbg("--- PRE Set(%v, %v)\n%s", k, v, t.dump())
	//defer func() {
	//	dbg("--- POST\n%s\n====\n", t.dump())
	//}()

	pi := -1
	var p *x1
	q := t.r
	if q == nil {
		z := t.insert(btDPool1.Get().(*d1), 0, k, v)
		t.r, t.first, t.last = z, z, z
		return
	}

	for {
		i, ok := t.find(q, k)
		if ok {
			switch x := q.(type) {
			case *x1:
				if x.c > 2*kx1 {
					x, i = t.splitX(p, x, pi, i)
				}
				pi = i + 1
				p = x
				q = x.x[i+1].ch
				continue
			case *d1:
				x.d[i].v = v
			}
			return
		}

		switch x := q.(type) {
		case *x1:
			if x.c > 2*kx1 {
				x, i = t.splitX(p, x, pi, i)
			}
			pi = i
			p = x
			q = x.x[i].ch
		case *d1:
			switch {
			case x.c < 2*kd1:
				t.insert(x, i, k, v)
			default:
				t.overflow(p, x, pi, i, k, v)
			}
			return
		}
	}
}

// Put combines Get and Set in a more efficient way where the tree is walked
// only once. The upd(ater) receives (old-value, true) if a KV pair for k
// exists or (zero-value, false) otherwise. It can then return a (new-value,
// true) to create or overwrite the existing value in the KV pair, or
// (whatever, false) if it decides not to create or not to update the value of
// the KV pair.
//
// 	tree.Set(k, v) call conceptually equals calling
//
// 	tree.Put(k, func(generic.T, bool){ return v, true })
//
// modulo the differing return values.
func (t *PrimaryTree) Put(k generic.T, upd func(oldV SecondaryLayer, exists bool) (newV SecondaryLayer, write bool)) (oldV SecondaryLayer, written bool) {
	pi := -1
	var p *x1
	q := t.r
	var newV SecondaryLayer
	if q == nil {
		// new KV pair in empty tree
		newV, written = upd(newV, false)
		if !written {
			return
		}

		z := t.insert(btDPool1.Get().(*d1), 0, k, newV)
		t.r, t.first, t.last = z, z, z
		return
	}

	for {
		i, ok := t.find(q, k)
		if ok {
			switch x := q.(type) {
			case *x1:
				if x.c > 2*kx1 {
					x, i = t.splitX(p, x, pi, i)
				}
				pi = i + 1
				p = x
				q = x.x[i+1].ch
				continue
			case *d1:
				oldV = x.d[i].v
				newV, written = upd(oldV, true)
				if !written {
					return
				}

				x.d[i].v = newV
			}
			return
		}

		switch x := q.(type) {
		case *x1:
			if x.c > 2*kx1 {
				x, i = t.splitX(p, x, pi, i)
			}
			pi = i
			p = x
			q = x.x[i].ch
		case *d1: // new KV pair
			newV, written = upd(newV, false)
			if !written {
				return
			}

			switch {
			case x.c < 2*kd1:
				t.insert(x, i, k, newV)
			default:
				t.overflow(p, x, pi, i, k, newV)
			}
			return
		}
	}
}

func (t *PrimaryTree) split(p *x1, q *d1, pi, i int, k generic.T, v SecondaryLayer) {
	atomic.AddUint64(&t.ver, 1)
	r := btDPool1.Get().(*d1)
	if q.n != nil {
		r.n = q.n
		r.n.p = r
	} else {
		t.last = r
	}
	q.n = r
	r.p = q

	copy(r.d[:], q.d[kd1:2*kd1])
	for i := range q.d[kd1:] {
		q.d[kd1+i] = zde1
	}
	q.c = kd1
	r.c = kd1
	var done bool
	if i > kd1 {
		done = true
		t.insert(r, i-kd1, k, v)
	}
	if pi >= 0 {
		p.insert(pi, r.d[0].k, r)
	} else {
		t.r = newX1(q).insert(0, r.d[0].k, r)
	}
	if done {
		return
	}

	t.insert(q, i, k, v)
}

func (t *PrimaryTree) splitX(p *x1, q *x1, pi int, i int) (*x1, int) {
	atomic.AddUint64(&t.ver, 1)
	r := btXPool1.Get().(*x1)
	copy(r.x[:], q.x[kx1+1:])
	q.c = kx1
	r.c = kx1
	if pi >= 0 {
		p.insert(pi, q.x[kx1].k, r)
		q.x[kx1].k = zk1
		for i := range q.x[kx1+1:] {
			q.x[kx1+i+1] = zxe1
		}

		switch {
		case i < kx1:
			return q, i
		case i == kx1:
			return p, pi
		default: // i > kx1
			return r, i - kx1 - 1
		}
	}

	nr := newX1(q).insert(0, q.x[kx1].k, r)
	t.r = nr
	q.x[kx1].k = zk1
	for i := range q.x[kx1+1:] {
		q.x[kx1+i+1] = zxe1
	}

	switch {
	case i < kx1:
		return q, i
	case i == kx1:
		return nr, 0
	default: // i > kx1
		return r, i - kx1 - 1
	}
}

func (t *PrimaryTree) underflow(p *x1, q *d1, pi int) {
	atomic.AddUint64(&t.ver, 1)
	l, r := p.siblings(pi)

	if l != nil && l.c+q.c >= 2*kd1 {
		l.mvR(q, 1)
		p.x[pi-1].k = q.d[0].k
		return
	}

	if r != nil && q.c+r.c >= 2*kd1 {
		q.mvL(r, 1)
		p.x[pi].k = r.d[0].k
		r.d[r.c] = zde1 // GC
		return
	}

	if l != nil {
		t.cat(p, l, q, pi-1)
		return
	}

	t.cat(p, q, r, pi)
}

func (t *PrimaryTree) underflowX(p *x1, q *x1, pi int, i int) (*x1, int) {
	atomic.AddUint64(&t.ver, 1)
	var l, r *x1

	if pi >= 0 {
		if pi > 0 {
			l = p.x[pi-1].ch.(*x1)
		}
		if pi < p.c {
			r = p.x[pi+1].ch.(*x1)
		}
	}

	if l != nil && l.c > kx1 {
		q.x[q.c+1].ch = q.x[q.c].ch
		copy(q.x[1:], q.x[:q.c])
		q.x[0].ch = l.x[l.c].ch
		q.x[0].k = p.x[pi-1].k
		q.c++
		i++
		l.c--
		p.x[pi-1].k = l.x[l.c].k
		return q, i
	}

	if r != nil && r.c > kx1 {
		q.x[q.c].k = p.x[pi].k
		q.c++
		q.x[q.c].ch = r.x[0].ch
		p.x[pi].k = r.x[0].k
		copy(r.x[:], r.x[1:r.c])
		r.c--
		rc := r.c
		r.x[rc].ch = r.x[rc+1].ch
		r.x[rc].k = zk1
		r.x[rc+1].ch = nil
		return q, i
	}

	if l != nil {
		i += l.c + 1
		t.catX(p, l, q, pi-1)
		q = l
		return q, i
	}

	t.catX(p, q, r, pi)
	return q, i
}

// ----------------------------------------------------------------- PrimaryEnumerator

// Close recycles e to a pool for possible later reuse. No references to e
// should exist or such references must not be used afterwards.
func (e *PrimaryEnumerator) Close() {
	*e = ze1
	btEPool1.Put(e)
}

// Next returns the currently enumerated item, if it exists and moves to the
// next item in the key collation order. If there is no item to return, err ==
// io.EOF is returned.
func (e *PrimaryEnumerator) Next() (k generic.T, v SecondaryLayer, err error) {
	if err = e.err; err != nil {
		return
	}
	if atomic.LoadUint64(&e.ver) != atomic.LoadUint64(&e.t.ver) {
		f, hit := e.t.Seek(e.k)
		if !e.hit && hit {
			if err = f.next(); err != nil {
				return
			}
		}

		*e = *f
		f.Close()
	}
	if e.q == nil {
		e.err, err = io.EOF, io.EOF
		return
	}

	if e.i >= e.q.c {
		if err = e.next(); err != nil {
			return
		}
	}

	i := e.q.d[e.i]
	k, v = i.k, i.v
	e.k, e.hit = k, false
	e.next()
	return
}

func (e *PrimaryEnumerator) next() error {
	if e.q == nil {
		e.err = io.EOF
		return io.EOF
	}

	switch {
	case e.i < e.q.c-1:
		e.i++
	default:
		if e.q, e.i = e.q.n, 0; e.q == nil {
			e.err = io.EOF
		}
	}
	return e.err
}

// Prev returns the currently enumerated item, if it exists and moves to the
// previous item in the key collation order. If there is no item to return, err
// == io.EOF is returned.
func (e *PrimaryEnumerator) Prev() (k generic.T, v SecondaryLayer, err error) {
	if err = e.err; err != nil {
		return
	}
	if atomic.LoadUint64(&e.ver) != atomic.LoadUint64(&e.t.ver) {
		f, hit := e.t.Seek(e.k)
		if !e.hit && hit {
			if err = f.prev(); err != nil {
				return
			}
		}

		*e = *f
		f.Close()
	}
	if e.q == nil {
		e.err, err = io.EOF, io.EOF
		return
	}

	if e.i >= e.q.c {
		if err = e.next(); err != nil {
			return
		}
	}

	i := e.q.d[e.i]
	k, v = i.k, i.v
	e.k, e.hit = k, false
	e.prev()
	return
}

func (e *PrimaryEnumerator) prev() error {
	if e.q == nil {
		e.err = io.EOF
		return io.EOF
	}

	switch {
	case e.i > 0:
		e.i--
	default:
		if e.q = e.q.p; e.q == nil {
			e.err = io.EOF
			break
		}

		e.i = e.q.c - 1
	}
	return e.err
}

func (t *PrimaryTree) Ver() uint64 {
	return atomic.LoadUint64(&t.ver)
}
